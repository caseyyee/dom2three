extends layouts/master

block content

block scripts
	script(type="text/javascript", src="js/dom2three.js")
	script(type="text/javascript", src="js/lib/three.min.js")

	script.
		// bend function
		function bend( group, amount, multiMaterialObject ) {
			function bendVertices( mesh, amount, parent ) {
				var vertices = mesh.geometry.vertices;

				if (!parent) {
					parent = mesh;
				}

				for (var i = 0; i < vertices.length; i++) {
					var vertex = vertices[i];

					// apply bend calculations on vertexes from world coordinates
					parent.updateMatrixWorld();

					var worldVertex = parent.localToWorld(vertex);

					var worldX = Math.sin( worldVertex.x / amount) * amount;
					var worldZ = - Math.cos( worldVertex.x / amount ) * amount;
					var worldY = worldVertex.y 	;

					// convert world coordinates back into local object coordinates.
					var localVertex = parent.worldToLocal(new THREE.Vector3(worldX, worldY, worldZ));
					vertex.x = localVertex.x;
					vertex.z = localVertex.z+amount;
					vertex.y = localVertex.y;
				};

				mesh.geometry.computeBoundingSphere();
				mesh.geometry.verticesNeedUpdate = true;
			}

			for ( var i = 0; i < group.children.length; i ++ ) {
				var element = group.children[ i ];

				if (element.geometry.vertices) {
					if (multiMaterialObject) {
						bendVertices( element, amount, group);
					} else {
						bendVertices( element, amount);
					}
				}
			}

			if (group.children.length == 0) {
				bendVertices(group, amount);
			}

		};


		var renderer = new THREE.WebGLRenderer( { antialias: true } );
		renderer.setSize(window.innerWidth, window.innerHeight);
		document.body.appendChild(renderer.domElement);
		
		var scene = new THREE.Scene();
		
		var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );

		var d23 = DOM2three.load('dom2three',{
			/*
			makeMeshes option generates three.js compatible meshes.
			*/
			makeMeshes: true,
			/* 
			pixelScale sets the pixel to three.js units ratio.   1px = 1 three.js unit.
			*/
			pixelScale: 1
		});

		d23.loaded.then(function() {
			
			// create object 3d and nest objects we want bent inside.
			var obj = new THREE.Object3D();
			obj.position.set(0, 500, -1050);
			
			var frog = d23.getNodeById('frog').mesh;
			frog.position.set(0, 0, 0);	// let's not use dom positioning.  resetting to 0,0,0
			obj.add(frog);

			bend(obj, 1000);	// bend object's children

			scene.add(obj)

			// get individual nodes by element ID, set attributes.
			var bird = d23.getNodeById('bird');
			
			var attributes = ['data-position', 'data-rotation'];
			var prefix = 'data-';

			attributes.forEach(function(attr){
				if (bird[attr]) {
					bird.mesh[attr.substring(prefix.length)].fromArray(bird[attr]);
				}
			});
			
			scene.add(bird.mesh);

			// get collection of nodes by ClassName and to scene using DOM positioning.
			var favMeshes = d23.getNodesByClass('fav'),
				fav, mesh;

			for (var i = 0; i < favMeshes.length; i++) {
				fav = favMeshes[i];
				mesh = fav.mesh;
				mesh.position.z = -1000;
				scene.add(mesh);
			};

			animate();
		});
		
		function animate() {
			renderer.render(scene, camera);
			requestAnimationFrame( animate );
		};

		

